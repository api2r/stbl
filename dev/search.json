[{"path":[]},{"path":"https://jonthegeek.github.io/stbl/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement jonthegeek@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to stbl","title":"Contributing to stbl","text":"outlines propose change stbl.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to stbl","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to stbl","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to stbl","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"jonthegeek/stbl\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to stbl","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to stbl","text":"Please note stbl project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 stbl authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with stbl","title":"Getting help with stbl","text":"Thanks using stbl! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with stbl","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with stbl","text":"Armed reprex, next step figure ask. ’s question: ’s best ask R4DS Online Learning Community Slack. options include Posit Community, StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with stbl","text":"’ll try look issue soon can, packages maintained volunteers. good reprex particularly important might weeks months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jon Harmon. Author, maintainer, copyright holder.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Harmon J (2025). stbl: Stabilize Function Arguments. R package version 0.1.1.9001, https://jonthegeek.github.io/stbl/.","code":"@Manual{,   title = {stbl: Stabilize Function Arguments},   author = {Jon Harmon},   year = {2025},   note = {R package version 0.1.1.9001},   url = {https://jonthegeek.github.io/stbl/}, }"},{"path":"https://jonthegeek.github.io/stbl/dev/index.html","id":"stbl","dir":"","previous_headings":"","what":"Stabilize Function Arguments","title":"Stabilize Function Arguments","text":"R flexible classes. Variables declared explicit classes, arguments “wrong” class don’t cause errors explicitly fail point call stack. helpful keep flexibility user standpoint, error informatively quickly inputs work computation. purpose {stbl} allow programmers specify want, see user supplied can work purpose. approach aligns Postel’s Law: “conservative send. liberal accept others.” {stbl} liberal accepts (coercing safe) conservative returns (ensuring inputs classes features expected).","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Stabilize Function Arguments","text":"Install development version {stbl} GitHub:","code":"# install.packages(\"pak\") pak::pak(\"jonthegeek/stbl\")"},{"path":"https://jonthegeek.github.io/stbl/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Stabilize Function Arguments","text":"Use within functions give meaningful error messages bad argument classes. example, perhaps like protect case data properly translated character load.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/index.html","id":"without-stbl","dir":"","previous_headings":"Usage","what":"Without {stbl}:","title":"Stabilize Function Arguments","text":"Without argument-stabilizers provided {stbl}, error messages can cryptic, errors trigger might want .","code":"my_old_fun <- function(my_arg_name) {   my_arg_name + 1 } my_old_fun(\"1\") #> Error in my_arg_name + 1: non-numeric argument to binary operator"},{"path":"https://jonthegeek.github.io/stbl/dev/index.html","id":"with-stbl","dir":"","previous_headings":"Usage","what":"With {stbl}:","title":"Stabilize Function Arguments","text":"{stbl} helps ensure arguments expect . Failures reported helpful messages. errors help locate issues within vectors.","code":"my_fun <- function(my_arg_name) {   my_arg_name <- stbl::to_int(my_arg_name)   my_arg_name + 1 } my_fun(\"1\") #> [1] 2 my_fun(\"1.1\") #> Error in `my_fun()`: #> ! `my_arg_name` <character> must be coercible to <integer> #> ✖ Can't convert some values due to loss of precision. #> • Locations: 1 my_fun(c(\"1\", \"2\", \"3.1\", \"4\", \"5.2\")) #> Error in `my_fun()`: #> ! `my_arg_name` <character> must be coercible to <integer> #> ✖ Can't convert some values due to loss of precision. #> • Locations: 3 and 5"},{"path":"https://jonthegeek.github.io/stbl/dev/index.html","id":"similar-packages","dir":"","previous_headings":"","what":"Similar Packages","title":"Stabilize Function Arguments","text":"packages perform functions similar {stbl}, different approaches: {checkmate} related assertion packages: {stbl} designed coerce possible, rather merely check. {checkmate} might throw error value expected class, {stbl} attempts convert something usable, errors coercion fails. makes {stbl} better fit user-facing functions flexibility important coercion safe. {vctrs}: {vctrs} provides strict, low-level tools coercion type consistency, especially useful package internals base-type enforcement. {stbl} tolerant higher-level, optimized use functions accept flexible user inputs (e.g. letting version number 1.1 passed numeric character handling gracefully).","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Stabilize Function Arguments","text":"Please note stbl project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-apply_regex_rule.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a single regex rule to a character vector — .apply_regex_rule","title":"Apply a single regex rule to a character vector — .apply_regex_rule","text":"Apply single regex rule character vector","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-apply_regex_rule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a single regex rule to a character vector — .apply_regex_rule","text":"","code":".apply_regex_rule(rule, x, x_arg, call)"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-apply_regex_rule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a single regex rule to a character vector — .apply_regex_rule","text":"rule (length-1 character) regex rule (possibly name negate attribute). x argument stabilize. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call execution environment call. See call argument rlang::abort() information.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-apply_regex_rule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a single regex rule to a character vector — .apply_regex_rule","text":"character vector error messages rule fails, otherwise NULL.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-check_value_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Check character values against one or more regex patterns — .check_value_chr","title":"Check character values against one or more regex patterns — .check_value_chr","text":"Check character values one regex patterns","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-check_value_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check character values against one or more regex patterns — .check_value_chr","text":"","code":".check_value_chr(x, regex, x_arg = caller_arg(x), call = caller_env())"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-check_value_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check character values against one or more regex patterns — .check_value_chr","text":"x argument stabilize. regex (character, list, stringr_pattern) One optional regular expressions test values x. can character vector, list character vectors, pattern object {stringr} package (e.g., stringr::fixed(\".b\")). default error message non-matching values include pattern (see regex_must_match()). provide custom message, supply named character vector value regex pattern name message displayed. check pattern matched, attach negate attribute set TRUE. complex regex pattern throws error, try installing stringi package. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call execution environment call. See call argument rlang::abort() information.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-check_value_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check character values against one or more regex patterns — .check_value_chr","text":"NULL, invisibly, x passes checks.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-check_value_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Check integer values against min and max values — .check_value_int","title":"Check integer values against min and max values — .check_value_int","text":"Check integer values min max values","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-check_value_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check integer values against min and max values — .check_value_int","text":"","code":".check_value_int(   x,   min_value,   max_value,   x_arg = caller_arg(x),   call = caller_env() )"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-check_value_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check integer values against min and max values — .check_value_int","text":"x argument stabilize. min_value (length-1 integer) lowest allowed value x. NULL (default) values checked. max_value (length-1 integer) highest allowed value x. NULL (default) values checked. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call execution environment call. See call argument rlang::abort() information.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-check_value_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check integer values against min and max values — .check_value_int","text":"NULL, invisibly, x passes checks.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-cli_escape.html","id":null,"dir":"Reference","previous_headings":"","what":"Escape curly braces for safe printing with cli — .cli_escape","title":"Escape curly braces for safe printing with cli — .cli_escape","text":"Replaces single curly braces ({, }) double curly braces ({{, }}) interpreted literal characters cli::cli_abort() expressions evaluated.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-cli_escape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Escape curly braces for safe printing with cli — .cli_escape","text":"","code":".cli_escape(msg)"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-cli_escape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Escape curly braces for safe printing with cli — .cli_escape","text":"msg (character) messages escape.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-cli_escape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Escape curly braces for safe printing with cli — .cli_escape","text":"messages curly braces escaped.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-cli_mark.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap text in cli markup — .cli_mark","title":"Wrap text in cli markup — .cli_mark","text":"Wrap text cli markup","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-cli_mark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap text in cli markup — .cli_mark","text":"","code":".cli_mark(x, tag)"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-cli_mark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap text in cli markup — .cli_mark","text":"x (character) string wrap. tag (character) cli class apply (e.g., \"val\", \"var\").","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-cli_mark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap text in cli markup — .cli_mark","text":"character vector length x cli markup.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-define_main_msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Define the main error message for a ","title":"Define the main error message for a ","text":"Define main error message \"must\" error","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-define_main_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define the main error message for a ","text":"","code":".define_main_msg(x_arg, msg)"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-define_main_msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define the main error message for a ","text":"x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. msg (character) core error message describing requirement.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-define_main_msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define the main error message for a ","text":"character string.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-describe_failure_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Describe a character-based validation failure — .describe_failure_chr","title":"Describe a character-based validation failure — .describe_failure_chr","text":"Describe character-based validation failure","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-describe_failure_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describe a character-based validation failure — .describe_failure_chr","text":"","code":".describe_failure_chr(x, success, negate = FALSE)"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-describe_failure_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describe a character-based validation failure — .describe_failure_chr","text":"x argument stabilize. success logical vector indicating elements x passed check. negate (logical) check negative one?","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-describe_failure_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Describe a character-based validation failure — .describe_failure_chr","text":"named character vector used additional_msg .stop_must().","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-find_failures.html","id":null,"dir":"Reference","previous_headings":"","what":"Safely find failure locations in a vector — .find_failures","title":"Safely find failure locations in a vector — .find_failures","text":"Run check_fn(x, check_value) check_value NULL.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-find_failures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safely find failure locations in a vector — .find_failures","text":"","code":".find_failures(x, check_value, check_fn)"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-find_failures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safely find failure locations in a vector — .find_failures","text":"x vector check. check_value value check (e.g., regex pattern). NULL, check skipped. check_fn function use checking.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-find_failures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safely find failure locations in a vector — .find_failures","text":"integer vector failure locations, NULL failures check skipped.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-glue2.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for glue::glue with custom delimiters — .glue2","title":"A wrapper for glue::glue with custom delimiters — .glue2","text":"wrapper sets .open .close arguments glue::glue() [ ], respectively. allows safe use glue interpolation within messages processed cli::cli_abort(), uses { } styling.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-glue2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for glue::glue with custom delimiters — .glue2","text":"","code":".glue2(..., env = caller_env())"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-glue2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for glue::glue with custom delimiters — .glue2","text":"... Arguments passed glue::glue(). Usually expects unnamed arguments named arguments .envir, .open, .close acceptable. env environment evaluate expressions.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-glue2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for glue::glue with custom delimiters — .glue2","text":"character string evaluated expressions.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-has_regex_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect a regex pattern in a character vector — .has_regex_pattern","title":"Detect a regex pattern in a character vector — .has_regex_pattern","text":"wrapper around stringi::stri_detect_regex() base::grepl() prefers stringi implementation package available.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-has_regex_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect a regex pattern in a character vector — .has_regex_pattern","text":"","code":".has_regex_pattern(x, regex)"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-has_regex_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect a regex pattern in a character vector — .has_regex_pattern","text":"x argument stabilize. regex (character, list, stringr_pattern) One optional regular expressions test values x. can character vector, list character vectors, pattern object {stringr} package (e.g., stringr::fixed(\".b\")). default error message non-matching values include pattern (see regex_must_match()). provide custom message, supply named character vector value regex pattern name message displayed. check pattern matched, attach negate attribute set TRUE. complex regex pattern throws error, try installing stringi package.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-has_regex_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect a regex pattern in a character vector — .has_regex_pattern","text":"logical vector matches x regex.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-shared-params.html","id":null,"dir":"Reference","previous_headings":"","what":"Shared parameters — .shared-params","title":"Shared parameters — .shared-params","text":"parameters used multiple functions. defined make easier import find.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-shared-params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shared parameters — .shared-params","text":"... dots future extensions empty. allow_na (length-1 logical) NA values ok? allow_null (length-1 logical) NULL acceptable value? allow_zero_length (length-1 logical) zero-length vectors acceptable? min_size (length-1 integer) minimum size object. Object size tested using vctrs::vec_size(). min_value (length-1 integer) lowest allowed value x. NULL (default) values checked. max_size (length-1 integer) maximum size object. Object size tested using vctrs::vec_size(). max_value (length-1 integer) highest allowed value x. NULL (default) values checked. regex (character, list, stringr_pattern) One optional regular expressions test values x. can character vector, list character vectors, pattern object {stringr} package (e.g., stringr::fixed(\".b\")). default error message non-matching values include pattern (see regex_must_match()). provide custom message, supply named character vector value regex pattern name message displayed. check pattern matched, attach negate attribute set TRUE. complex regex pattern throws error, try installing stringi package. x argument stabilize. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class. call execution environment call. See call argument rlang::abort() information.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-stbl_abort.html","id":null,"dir":"Reference","previous_headings":"","what":"Signal an error with standards applied — .stbl_abort","title":"Signal an error with standards applied — .stbl_abort","text":"wrapper around cli::cli_abort() throw classed errors.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-stbl_abort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signal an error with standards applied — .stbl_abort","text":"","code":".stbl_abort(   message,   subclass,   call = rlang::caller_env(),   message_env = call,   parent = NULL,   ... )"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-stbl_abort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signal an error with standards applied — .stbl_abort","text":"message (character) message new error. Messages formatted cli::cli_bullets(). subclass (character) Class(es) assign error. prefixed \"stbl-error-\". call (environment) execution environment mention source error messages. message_env (environment) execution environment use evaluate variables error messages. parent parent condition, might create rlang::try_fetch(). See rlang::abort() additional information. ... Additional parameters passed cli::cli_abort() rlang::abort().","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-stop_cant_coerce.html","id":null,"dir":"Reference","previous_headings":"","what":"Abort with a standardized ","title":"Abort with a standardized ","text":"Abort standardized \"coerce\" message","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-stop_cant_coerce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abort with a standardized ","text":"","code":".stop_cant_coerce(from_class, to_class, x_arg, call, additional_msg = NULL)"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-stop_cant_coerce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abort with a standardized ","text":"from_class (length-1 character) class object failed coercion. to_class (length-1 character) target class coercion. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call execution environment call. See call argument rlang::abort() information. additional_msg (length-1 character) Optional, additional cli-formatted messages.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-stop_cant_coerce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Abort with a standardized ","text":"function called side effect throwing error return value.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-stop_incompatible.html","id":null,"dir":"Reference","previous_headings":"","what":"Abort with an ","title":"Abort with an ","text":"Abort \"incompatible type\" message","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-stop_incompatible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abort with an ","text":"","code":".stop_incompatible(x_class, to, failures, due_to, x_arg, call)"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-stop_incompatible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abort with an ","text":"x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class. target object coercion. failures (logical) logical vector indicating elements failed. due_to (length-1 character) string describing reason failure. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call execution environment call. See call argument rlang::abort() information.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-stop_incompatible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Abort with an ","text":"function called side effect throwing error return value.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-stop_must.html","id":null,"dir":"Reference","previous_headings":"","what":"Abort with a standardized ","title":"Abort with a standardized ","text":"Abort standardized \"must\" message","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-stop_must.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abort with a standardized ","text":"","code":".stop_must(msg, x_arg, call, additional_msg = NULL, class = \"stbl_error_must\")"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-stop_must.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abort with a standardized ","text":"msg (character) core error message describing requirement. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call execution environment call. See call argument rlang::abort() information. additional_msg (character) Optional, additional cli-formatted messages. class (character) specific error class assign.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-stop_must.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Abort with a standardized ","text":"function called side effect throwing error return value.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-stop_null.html","id":null,"dir":"Reference","previous_headings":"","what":"Abort because an argument must not be NULL — .stop_null","title":"Abort because an argument must not be NULL — .stop_null","text":"Abort argument must NULL","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-stop_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abort because an argument must not be NULL — .stop_null","text":"","code":".stop_null(x_arg, call)"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-stop_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abort because an argument must not be NULL — .stop_null","text":"x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call execution environment call. See call argument rlang::abort() information.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/dot-stop_null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Abort because an argument must not be NULL — .stop_null","text":"function called side effect throwing error return value.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/grapes-and-and-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"NULL-coalescing-like operator — %&&%","title":"NULL-coalescing-like operator — %&&%","text":"left-hand side NULL, returns right-hand side. Otherwise, returns NULL. useful guarding expressions executed value NULL. Meant similar %||% operator (returns y x NULL).","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/grapes-and-and-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NULL-coalescing-like operator — %&&%","text":"","code":"x %&&% y"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/grapes-and-and-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NULL-coalescing-like operator — %&&%","text":"x object check NULL. y value return x NULL.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/grapes-and-and-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NULL-coalescing-like operator — %&&%","text":"NULL value y.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/object_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the class, type, etc of an object — object_type","title":"Identify the class, type, etc of an object — object_type","text":"Extract class (type) object use error messages.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/object_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the class, type, etc of an object — object_type","text":"","code":"object_type(x)"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/object_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the class, type, etc of an object — object_type","text":"x object test.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/object_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify the class, type, etc of an object — object_type","text":"length-1 character vector describing class object.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/object_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify the class, type, etc of an object — object_type","text":"","code":"object_type(\"a\") #> [1] \"character\" object_type(1L) #> [1] \"integer\" object_type(1.1) #> [1] \"double\" object_type(mtcars) #> [1] \"data.frame\" object_type(rlang::quo(something)) #> [1] \"quosure\""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. rlang caller_arg, caller_env","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/regex_must_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a regex matching rule — regex_must_match","title":"Create a regex matching rule — regex_must_match","text":"Attach standardized error message regex argument. default, message \"must match regex pattern {regex}\". input regex negate attribute set TRUE, message instead \"must match...\". message can used stabilize_chr() stabilize_chr_scalar().","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/regex_must_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a regex matching rule — regex_must_match","text":"","code":"regex_must_match(regex)"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/regex_must_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a regex matching rule — regex_must_match","text":"regex (character) regular expression pattern.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/regex_must_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a regex matching rule — regex_must_match","text":"regex value names() equal generated error message.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/regex_must_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a regex matching rule — regex_must_match","text":"","code":"regex_must_match(\"[aeiou]\") #> must match the regex pattern {.val [aeiou]}  #>                                   \"[aeiou]\"   # With negation: regex <- \"[aeiou]\" attr(regex, \"negate\") <- TRUE regex_must_match(regex) #> must not match the regex pattern {.val [aeiou]}  #>                                       \"[aeiou]\"  #> attr(,\"negate\") #> [1] TRUE"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/regex_must_not_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a 'must not match' regex rule — regex_must_not_match","title":"Create a 'must not match' regex rule — regex_must_not_match","text":"Attach standardized error message regex argument specifies pattern must matched. wrapper around regex_must_match() sets negate attribute TRUE.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/regex_must_not_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a 'must not match' regex rule — regex_must_not_match","text":"","code":"regex_must_not_match(regex)"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/regex_must_not_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a 'must not match' regex rule — regex_must_not_match","text":"regex (character) regular expression pattern.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/regex_must_not_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a 'must not match' regex rule — regex_must_not_match","text":"regex value negate attribute names() equal generated \"must match\" error message.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/regex_must_not_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a 'must not match' regex rule — regex_must_not_match","text":"","code":"regex_must_not_match(\"[aeiou]\") #> must not match the regex pattern {.val [aeiou]}  #>                                       \"[aeiou]\"  #> attr(,\"negate\") #> [1] TRUE"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_arg.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure an argument meets expectations — stabilize_arg","title":"Ensure an argument meets expectations — stabilize_arg","text":"stabilize_arg() used functions stabilize_int(). Use stabilize_arg() type-specific functions work use case, still like check things like size whether argument NULL. stabilize_arg_scalar() optimized check length-1 vectors.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_arg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure an argument meets expectations — stabilize_arg","text":"","code":"stabilize_arg(   x,   ...,   allow_null = TRUE,   allow_na = TRUE,   min_size = NULL,   max_size = NULL,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  stabilize_arg_scalar(   x,   ...,   allow_null = TRUE,   allow_zero_length = TRUE,   allow_na = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_arg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure an argument meets expectations — stabilize_arg","text":"x argument stabilize. ... dots future extensions empty. allow_null (length-1 logical) NULL acceptable value? allow_na (length-1 logical) NA values ok? min_size (length-1 integer) minimum size object. Object size tested using vctrs::vec_size(). max_size (length-1 integer) maximum size object. Object size tested using vctrs::vec_size(). x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call execution environment call. See call argument rlang::abort() information. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class. allow_zero_length (length-1 logical) zero-length vectors acceptable?","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_arg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure an argument meets expectations — stabilize_arg","text":"x, unless one checks fails.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_arg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure an argument meets expectations — stabilize_arg","text":"","code":"wrapper <- function(this_arg, ...) {   stabilize_arg(this_arg, ...) } wrapper(1) #> [1] 1 wrapper(NULL) #> NULL wrapper(NA) #> [1] NA try(wrapper(NULL, allow_null = FALSE)) #> Error in wrapper(NULL, allow_null = FALSE) :  #>   `this_arg` must not be <NULL>. try(wrapper(NA, allow_na = FALSE)) #> Error in wrapper(NA, allow_na = FALSE) :  #>   `this_arg` must not contain NA values. #> • NA locations: 1 try(wrapper(1, min_size = 2)) #> Error in wrapper(1, min_size = 2) :  #>   `this_arg` must have size >= 2. #> ✖ 1 is too small. try(wrapper(1:10, max_size = 5)) #> Error in wrapper(1:10, max_size = 5) :  #>   `this_arg` must have size <= 5. #> ✖ 10 is too big. stabilize_arg_scalar(\"a\") #> [1] \"a\" stabilize_arg_scalar(1L) #> [1] 1 try(stabilize_arg_scalar(1:10)) #> Error in eval(expr, envir) :  #>   `1:10` must be a single <integer>. #> ✖ `1:10` has 10 values."},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure a character argument meets expectations — stabilize_chr","title":"Ensure a character argument meets expectations — stabilize_chr","text":"to_chr() checks whether argument can coerced character without losing information, returning silently . Otherwise informative error message signaled. stabilize_chr() can check details argument, slower to_chr(). stabilize_chr_scalar() to_chr_scalar() optimized check length-1 character vectors.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure a character argument meets expectations — stabilize_chr","text":"","code":"stabilize_chr(   x,   ...,   allow_null = TRUE,   allow_na = TRUE,   min_size = NULL,   max_size = NULL,   regex = NULL,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  stabilize_chr_scalar(   x,   ...,   allow_null = TRUE,   allow_zero_length = TRUE,   allow_na = TRUE,   regex = NULL,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  to_chr(   x,   allow_null = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  to_chr_scalar(   x,   allow_null = TRUE,   allow_zero_length = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure a character argument meets expectations — stabilize_chr","text":"x argument stabilize. ... dots future extensions empty. allow_null (length-1 logical) NULL acceptable value? allow_na (length-1 logical) NA values ok? min_size (length-1 integer) minimum size object. Object size tested using vctrs::vec_size(). max_size (length-1 integer) maximum size object. Object size tested using vctrs::vec_size(). regex (character, list, stringr_pattern) One optional regular expressions test values x. can character vector, list character vectors, pattern object {stringr} package (e.g., stringr::fixed(\".b\")). default error message non-matching values include pattern (see regex_must_match()). provide custom message, supply named character vector value regex pattern name message displayed. check pattern matched, attach negate attribute set TRUE. complex regex pattern throws error, try installing stringi package. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call execution environment call. See call argument rlang::abort() information. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class. allow_zero_length (length-1 logical) zero-length vectors acceptable?","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure a character argument meets expectations — stabilize_chr","text":"argument character vector.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_chr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ensure a character argument meets expectations — stabilize_chr","text":"functions two important differences base::.character(): lists data.frames coerced character. base R, objects coerced character representations elements. example, .character(list(1:3)) returns \"1:10\". unlikely event expected behavior, use .character() instead. NULL values can rejected part call function (allow_null = FALSE).","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_chr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure a character argument meets expectations — stabilize_chr","text":"","code":"to_chr(\"a\") #> [1] \"a\" to_chr(letters) #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" to_chr(1:10) #>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" to_chr(1 + 0i) #> [1] \"1+0i\" to_chr(NULL) #> NULL try(to_chr(NULL, allow_null = FALSE)) #> Error in eval(expr, envir) : `NULL` must not be <NULL>.  to_chr_scalar(\"a\") #> [1] \"a\" try(to_chr_scalar(letters)) #> Error in eval(expr, envir) :  #>   `letters` must be a single <character>. #> ✖ `letters` has 26 values.  stabilize_chr(letters) #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" stabilize_chr(1:10) #>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" stabilize_chr(NULL) #> NULL try(stabilize_chr(NULL, allow_null = FALSE)) #> Error in eval(expr, envir) : `NULL` must not be <NULL>. try(stabilize_chr(c(\"a\", NA), allow_na = FALSE)) #> Error in eval(expr, envir) :  #>   `c(\"a\", NA)` must not contain NA values. #> • NA locations: 2 try(stabilize_chr(letters, min_size = 50)) #> Error in eval(expr, envir) : `letters` must have size >= 50. #> ✖ 26 is too small. try(stabilize_chr(letters, max_size = 20)) #> Error in eval(expr, envir) : `letters` must have size <= 20. #> ✖ 26 is too big. try(stabilize_chr(c(\"hide\", \"find\", \"find\", \"hide\"), regex = \"hide\")) #> Error in eval(expr, envir) :  #>   `c(\"hide\", \"find\", \"find\", \"hide\")` must match the regex pattern \"hide\" #> ✖ Some values do not match. #> • Locations: 2 and 3 #> • Values: find and find  stabilize_chr_scalar(TRUE) #> [1] \"TRUE\" stabilize_chr_scalar(\"TRUE\") #> [1] \"TRUE\" try(stabilize_chr_scalar(c(TRUE, FALSE, TRUE))) #> Error in eval(expr, envir) :  #>   `c(TRUE, FALSE, TRUE)` must be a single <character>. #> ✖ `c(TRUE, FALSE, TRUE)` has 3 values. stabilize_chr_scalar(NULL) #> NULL try(stabilize_chr_scalar(NULL, allow_null = FALSE)) #> Error in eval(expr, envir) : `NULL` must not be <NULL>."},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure a factor argument meets expectations — stabilize_fct","title":"Ensure a factor argument meets expectations — stabilize_fct","text":"to_fct() checks whether argument can coerced factor without losing information, returning silently . Otherwise informative error message signaled. stabilize_fct() can check details argument, slower to_fct(). stabilize_fct_scalar() to_fct_scalar() optimized check length-1 factors.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure a factor argument meets expectations — stabilize_fct","text":"","code":"stabilize_fct(   x,   ...,   allow_null = TRUE,   allow_na = TRUE,   min_size = NULL,   max_size = NULL,   levels = NULL,   to_na = character(),   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  stabilize_fct_scalar(   x,   ...,   allow_null = TRUE,   allow_zero_length = TRUE,   allow_na = TRUE,   levels = NULL,   to_na = character(),   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  to_fct(   x,   allow_null = TRUE,   levels = NULL,   to_na = character(),   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  to_fct_scalar(   x,   allow_null = TRUE,   allow_zero_length = TRUE,   levels = NULL,   to_na = character(),   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure a factor argument meets expectations — stabilize_fct","text":"x argument stabilize. ... dots future extensions empty. allow_null (length-1 logical) NULL acceptable value? allow_na (length-1 logical) NA values ok? min_size (length-1 integer) minimum size object. Object size tested using vctrs::vec_size(). max_size (length-1 integer) maximum size object. Object size tested using vctrs::vec_size(). levels (character) Expected levels. NULL (default), levels computed base::factor(). to_na (character) Values coerce NA. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call execution environment call. See call argument rlang::abort() information. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class. allow_zero_length (length-1 logical) zero-length vectors acceptable?","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_fct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure a factor argument meets expectations — stabilize_fct","text":"argument factor.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_fct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ensure a factor argument meets expectations — stabilize_fct","text":"functions important differences base::.factor() base::factor(): Values never silently coerced NA unless explicitly supplied to_na argument. NULL values can rejected part call function (allow_null = FALSE).","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_fct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure a factor argument meets expectations — stabilize_fct","text":"","code":"to_fct(\"a\") #> [1] a #> Levels: a to_fct(1:10) #>  [1] 1  2  3  4  5  6  7  8  9  10 #> Levels: 1 2 3 4 5 6 7 8 9 10 to_fct(NULL) #> NULL try(to_fct(letters[1:5], levels = c(\"a\", \"c\"), to_na = \"b\")) #> Error in eval(expr, envir) :  #>   All values of `letters[1:5]` must be present in `levels` or `to_na`. #> • Bad values: d and e.  to_fct_scalar(\"a\") #> [1] a #> Levels: a try(to_fct_scalar(letters)) #> Error in eval(expr, envir) :  #>   `letters` must be a single <factor>. #> ✖ `letters` has 26 values.  stabilize_fct(letters) #>  [1] a b c d e f g h i j k l m n o p q r s t u v w x y z #> Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z try(stabilize_fct(NULL, allow_null = FALSE)) #> Error in eval(expr, envir) : `NULL` must not be <NULL>. try(stabilize_fct(c(\"a\", NA), allow_na = FALSE)) #> Error in eval(expr, envir) :  #>   `c(\"a\", NA)` must not contain NA values. #> • NA locations: 2 try(stabilize_fct(c(\"a\", \"b\", \"c\"), min_size = 5)) #> Error in eval(expr, envir) :  #>   `c(\"a\", \"b\", \"c\")` must have size >= 5. #> ✖ 3 is too small. try(stabilize_fct(c(\"a\", \"b\", \"c\"), max_size = 2)) #> Error in eval(expr, envir) :  #>   `c(\"a\", \"b\", \"c\")` must have size <= 2. #> ✖ 3 is too big.  stabilize_fct_scalar(\"a\") #> [1] a #> Levels: a try(stabilize_fct_scalar(letters)) #> Error in eval(expr, envir) :  #>   `letters` must be a single <factor>. #> ✖ `letters` has 26 values. try(stabilize_fct_scalar(\"c\", levels = c(\"a\", \"b\"))) #> Error in eval(expr, envir) :  #>   All values of `\"c\"` must be present in `levels` or `to_na`. #> • Bad values: c."},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure an integer argument meets expectations — stabilize_int","title":"Ensure an integer argument meets expectations — stabilize_int","text":"to_int() checks whether argument can coerced integer without losing information, returning silently . Otherwise informative error message signaled. stabilize_int() can check details argument, slower to_int(). stabilize_int_scalar() to_int_scalar() optimized check length-1 integer vectors.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure an integer argument meets expectations — stabilize_int","text":"","code":"stabilize_int(   x,   ...,   allow_null = TRUE,   allow_na = TRUE,   coerce_character = TRUE,   coerce_factor = TRUE,   min_size = NULL,   max_size = NULL,   min_value = NULL,   max_value = NULL,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  stabilize_int_scalar(   x,   ...,   allow_null = TRUE,   allow_zero_length = TRUE,   allow_na = TRUE,   coerce_character = TRUE,   coerce_factor = TRUE,   min_value = NULL,   max_value = NULL,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  to_int(   x,   allow_null = TRUE,   coerce_character = TRUE,   coerce_factor = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  to_int_scalar(   x,   allow_null = TRUE,   allow_zero_length = TRUE,   coerce_character = TRUE,   coerce_factor = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure an integer argument meets expectations — stabilize_int","text":"x argument stabilize. ... dots future extensions empty. allow_null (length-1 logical) NULL acceptable value? allow_na (length-1 logical) NA values ok? coerce_character (logical) character vectors \"1\" \"2.0\" coerced integer? coerce_factor (logical) factors values \"1\" \"2.0\" coerced integer? Note function uses character value factor, .integer() uses integer index factor. min_size (length-1 integer) minimum size object. Object size tested using vctrs::vec_size(). max_size (length-1 integer) maximum size object. Object size tested using vctrs::vec_size(). min_value (length-1 integer) lowest allowed value x. NULL (default) values checked. max_value (length-1 integer) highest allowed value x. NULL (default) values checked. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call execution environment call. See call argument rlang::abort() information. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class. allow_zero_length (length-1 logical) zero-length vectors acceptable?","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure an integer argument meets expectations — stabilize_int","text":"argument integer.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_int.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure an integer argument meets expectations — stabilize_int","text":"","code":"to_int(1:10) #>  [1]  1  2  3  4  5  6  7  8  9 10 to_int(\"1\") #> [1] 1 to_int(1 + 0i) #> [1] 1 to_int(NULL) #> NULL try(to_int(c(1, 2, 3.1, 4, 5.2))) #> Error in eval(expr, envir) :  #>   Can't convert from `c(1, 2, 3.1, 4, 5.2)` <double> to <integer> due to loss of precision. #> • Locations: 3, 5 try(to_int(\"1\", coerce_character = FALSE)) #> Error in eval(expr, envir) :  #>   Can't coerce `\"1\"` <character> to <integer>. try(to_int(c(\"1\", \"2\", \"3.1\", \"4\", \"5.2\"))) #> Error in eval(expr, envir) :  #>   `c(\"1\", \"2\", \"3.1\", \"4\", \"5.2\")` <character> must be coercible to #> <integer> #> ✖ Can't convert some values due to loss of precision. #> • Locations: 3 and 5  to_int_scalar(\"1\") #> [1] 1 try(to_int_scalar(1:10)) #> Error in eval(expr, envir) :  #>   `1:10` must be a single <integer>. #> ✖ `1:10` has 10 values.  stabilize_int(1:10) #>  [1]  1  2  3  4  5  6  7  8  9 10 stabilize_int(\"1\") #> [1] 1 stabilize_int(1 + 0i) #> [1] 1 stabilize_int(NULL) #> NULL try(stabilize_int(NULL, allow_null = FALSE)) #> Error in eval(expr, envir) : `NULL` must not be <NULL>. try(stabilize_int(c(1, NA), allow_na = FALSE)) #> Error in eval(expr, envir) :  #>   `c(1, NA)` must not contain NA values. #> • NA locations: 2 try(stabilize_int(letters)) #> Error in eval(expr, envir) :  #>   `letters` <character> must be coercible to <integer> #> ✖ Can't convert some values due to incompatible values. #> • Locations: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, …, #>   25, and 26 try(stabilize_int(\"1\", coerce_character = FALSE)) #> Error in eval(expr, envir) :  #>   Can't coerce `\"1\"` <character> to <integer>. try(stabilize_int(factor(c(\"1\", \"a\")))) #> Error in eval(expr, envir) :  #>   `factor(c(\"1\", \"a\"))` <factor> must be coercible to <integer> #> ✖ Can't convert some values due to incompatible values. #> • Locations: 2 try(stabilize_int(factor(\"1\"), coerce_factor = FALSE)) #> Error in eval(expr, envir) :  #>   Can't coerce `factor(\"1\")` <factor> to <integer>. try(stabilize_int(1:10, min_value = 3)) #> Error in eval(expr, envir) :  #>   ! Values of `1:10` must be >= 3. #> ✖ Values are too low at locations 1 and 2. try(stabilize_int(1:10, max_value = 7)) #> Error in eval(expr, envir) :  #>   ! Values of `1:10` must be <= 7. #> ✖ Values are too high at locations 8, 9, and 10.  stabilize_int_scalar(1L) #> [1] 1 stabilize_int_scalar(\"1\") #> [1] 1 try(stabilize_int_scalar(1:10)) #> Error in eval(expr, envir) :  #>   `1:10` must be a single <integer>. #> ✖ `1:10` has 10 values. stabilize_int_scalar(NULL) #> NULL try(stabilize_int_scalar(NULL, allow_null = FALSE)) #> Error in eval(expr, envir) : `NULL` must not be <NULL>."},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_lgl.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure a logical argument meets expectations — stabilize_lgl","title":"Ensure a logical argument meets expectations — stabilize_lgl","text":"to_lgl() checks whether argument can coerced logical without losing information, returning silently . Otherwise informative error message signaled. stabilize_lgl() can check details argument, slower to_lgl(). stabilize_lgl_scalar() to_lgl_scalar() optimized check length-1 logical vectors.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_lgl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure a logical argument meets expectations — stabilize_lgl","text":"","code":"stabilize_lgl(   x,   ...,   allow_null = TRUE,   allow_na = TRUE,   min_size = NULL,   max_size = NULL,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  stabilize_lgl_scalar(   x,   ...,   allow_null = TRUE,   allow_zero_length = TRUE,   allow_na = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  to_lgl(   x,   allow_null = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  to_lgl_scalar(   x,   allow_null = TRUE,   allow_zero_length = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )"},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_lgl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure a logical argument meets expectations — stabilize_lgl","text":"x argument stabilize. ... dots future extensions empty. allow_null (length-1 logical) NULL acceptable value? allow_na (length-1 logical) NA values ok? min_size (length-1 integer) minimum size object. Object size tested using vctrs::vec_size(). max_size (length-1 integer) maximum size object. Object size tested using vctrs::vec_size(). x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call execution environment call. See call argument rlang::abort() information. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class. allow_zero_length (length-1 logical) zero-length vectors acceptable?","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_lgl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure a logical argument meets expectations — stabilize_lgl","text":"argument logical vector.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stabilize_lgl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure a logical argument meets expectations — stabilize_lgl","text":"","code":"to_lgl(TRUE) #> [1] TRUE to_lgl(\"TRUE\") #> [1] TRUE to_lgl(1:10) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE to_lgl(NULL) #> NULL try(to_lgl(NULL, allow_null = FALSE)) #> Error in eval(expr, envir) : `NULL` must not be <NULL>. try(to_lgl(letters)) #> Error in eval(expr, envir) :  #>   `letters` <character> must be coercible to <logical> #> ✖ Can't convert some values due to incompatible values. #> • Locations: 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, …, #>   25, and 26 try(to_lgl(list(TRUE))) #> Error in eval(expr, envir) :  #>   Can't coerce `list(TRUE)` <list> to <logical>.  to_lgl_scalar(\"TRUE\") #> [1] TRUE try(to_lgl_scalar(c(TRUE, FALSE))) #> Error in eval(expr, envir) :  #>   `c(TRUE, FALSE)` must be a single <logical>. #> ✖ `c(TRUE, FALSE)` has 2 values.  stabilize_lgl(c(TRUE, FALSE, TRUE)) #> [1]  TRUE FALSE  TRUE stabilize_lgl(\"true\") #> [1] TRUE stabilize_lgl(NULL) #> NULL try(stabilize_lgl(NULL, allow_null = FALSE)) #> Error in eval(expr, envir) : `NULL` must not be <NULL>. try(stabilize_lgl(c(TRUE, NA), allow_na = FALSE)) #> Error in eval(expr, envir) :  #>   `c(TRUE, NA)` must not contain NA values. #> • NA locations: 2 try(stabilize_lgl(letters)) #> Error in eval(expr, envir) :  #>   `letters` <character> must be coercible to <logical> #> ✖ Can't convert some values due to incompatible values. #> • Locations: 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, …, #>   25, and 26 try(stabilize_lgl(c(TRUE, FALSE, TRUE), min_size = 5)) #> Error in eval(expr, envir) :  #>   `c(TRUE, FALSE, TRUE)` must have size >= 5. #> ✖ 3 is too small. try(stabilize_lgl(c(TRUE, FALSE, TRUE), max_size = 2)) #> Error in eval(expr, envir) :  #>   `c(TRUE, FALSE, TRUE)` must have size <= 2. #> ✖ 3 is too big.  stabilize_lgl_scalar(TRUE) #> [1] TRUE stabilize_lgl_scalar(\"TRUE\") #> [1] TRUE try(stabilize_lgl_scalar(c(TRUE, FALSE, TRUE))) #> Error in eval(expr, envir) :  #>   `c(TRUE, FALSE, TRUE)` must be a single <logical>. #> ✖ `c(TRUE, FALSE, TRUE)` has 3 values. stabilize_lgl_scalar(NULL) #> NULL try(stabilize_lgl_scalar(NULL, allow_null = FALSE)) #> Error in eval(expr, envir) : `NULL` must not be <NULL>."},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stbl-package.html","id":null,"dir":"Reference","previous_headings":"","what":"stbl: Stabilize Function Arguments — stbl-package","title":"stbl: Stabilize Function Arguments — stbl-package","text":"set consistent, opinionated functions quickly check function arguments, coerce desired configuration, deliver informative error messages possible.","code":""},{"path":[]},{"path":"https://jonthegeek.github.io/stbl/dev/reference/stbl-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"stbl: Stabilize Function Arguments — stbl-package","text":"Maintainer: Jon Harmon jonthegeek@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/news/index.html","id":"stbl-development-version","dir":"Changelog","previous_headings":"","what":"stbl (development version)","title":"stbl (development version)","text":"Clarify purpose vision package (#56, #77).","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/news/index.html","id":"stbl-011","dir":"Changelog","previous_headings":"","what":"stbl 0.1.1","title":"stbl 0.1.1","text":"CRAN release: 2024-05-23 Update formatting DESCRIPTION examples.","code":""},{"path":"https://jonthegeek.github.io/stbl/dev/news/index.html","id":"stbl-010","dir":"Changelog","previous_headings":"","what":"stbl 0.1.0","title":"stbl 0.1.0","text":"Initial CRAN submission.","code":""}]
