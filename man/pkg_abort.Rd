% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkg_abort.R
\name{pkg_abort}
\alias{pkg_abort}
\title{Signal an error with standards applied}
\usage{
pkg_abort(
  package,
  message,
  subclass,
  call = caller_env(),
  message_env = call,
  parent = NULL,
  ...
)
}
\arguments{
\item{package}{\verb{(length-1 character)} The name of the package to use in
classes.}

\item{message}{(\code{character}) The message for the new error. Messages will be
formatted with \code{\link[cli:cli_bullets]{cli::cli_bullets()}}.}

\item{subclass}{(\code{character}) Class(es) to assign to the error. Will be
prefixed by "\{package\}-error-".}

\item{call}{\code{(environment)} The execution environment to mention as the
source of error messages.}

\item{message_env}{(\code{environment}) The execution environment to use to
evaluate variables in error messages.}

\item{parent}{A parent condition, as you might create during a
\code{\link[rlang:try_fetch]{rlang::try_fetch()}}. See \code{\link[rlang:abort]{rlang::abort()}} for additional information.}

\item{...}{Additional parameters passed to \code{\link[cli:cli_abort]{cli::cli_abort()}} and on to
\code{\link[rlang:abort]{rlang::abort()}}.}
}
\description{
A wrapper around \code{\link[cli:cli_abort]{cli::cli_abort()}} to throw classed errors, with an
opinionated framework of error classes.
}
\examples{
try(pkg_abort("stbl", "This is a test error", "test_subclass"))
tryCatch(
  pkg_abort("stbl", "This is a test error", "test_subclass"),
  `stbl-error` = function(e) {
    "Caught a generic stbl error."
  }
)
tryCatch(
  pkg_abort("stbl", "This is a test error", "test_subclass"),
  `stbl-error-test_subclass` = function(e) {
    "Caught a specific subclass of stbl error."
  }
)

}
