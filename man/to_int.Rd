% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/to_int.R, R/to_int_scalar.R
\name{to_int}
\alias{to_int}
\alias{to_int_scalar}
\title{Coerce an argument to integer}
\usage{
to_int(
  x,
  allow_null = TRUE,
  coerce_character = TRUE,
  coerce_factor = TRUE,
  x_arg = caller_arg(x),
  call = caller_env(),
  x_class = object_type(x)
)

to_int_scalar(
  x,
  allow_null = TRUE,
  allow_zero_length = TRUE,
  coerce_character = TRUE,
  coerce_factor = TRUE,
  x_arg = caller_arg(x),
  call = caller_env(),
  x_class = object_type(x)
)
}
\arguments{
\item{x}{The argument to stabilize.}

\item{allow_null}{Logical. Is NULL an acceptable value?}

\item{coerce_character}{Logical. Should character vectors such as "1" and
"2.0" be coerced to integer?}

\item{coerce_factor}{Logical. Should factors with values such as "1" and
"2.0" be coerced to integer? Note that this function uses the character
value from the factor, while \code{\link[=as.integer]{as.integer()}} uses the integer index of the
factor.}

\item{x_arg}{Character. An argument name for x. The automatic value will work
in most cases, or pass it through from higher-level functions to make error
messages clearer in unexported functions.}

\item{call}{The execution environment of the call. See the \code{call} argument of
\code{rlang::abort()} for more information.}

\item{x_class}{Character. The class name of \code{x} to use in error messages. Use
this if you remove a special class from \code{x} before checking its coercion,
but want the error message to match the original class.}

\item{allow_zero_length}{Logical. Are zero-length vectors acceptable?}
}
\value{
An integer equivalent to \code{x}.
}
\description{
If a value can be coerced to an integer without losing information, do so
silently. Otherwise throw an informative error. This function is equivalent
to \code{\link[=stabilize_int]{stabilize_int()}} with all of the additional arguments set to their
default values, but should be faster.
}
\examples{
to_int(1:10)
to_int("1")
to_int(1 + 0i)
to_int(NULL)
try(to_int(c(1, 2, 3.1, 4, 5.2)))
try(to_int("1", coerce_character = FALSE))
try(to_int(c("1", "2", "3.1", "4", "5.2")))
to_int_scalar("1")
try(to_int_scalar(1:10))
}
